# Install MPI into the github actions runnner, via apt or from source.
name: cmake

on:
  push:
    paths:
      # this workflow.
      - ".github/workflows/install-mpi.yml"

jobs:
  configure:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        mpi:
          - lib: "openmpi"
            version: "apt"
          - lib: "openmpi"
            version: "4.1.6"
          # - lib: "openmpi"
          #   version: "4.0.0"
          # - lib: "openmpi"
          #   version: "3.0.0"
          # - lib: "openmpi"
          #   version: "2.0.0"
          # - lib: "openmpi"
          #   version: "1.10.7"
          - lib: "mpich"
            version: "apt"
          - lib: "mpich"
            version: "4.1.2"
          - lib: "mpich"
            version: "4.0"
          - lib: "mpich"
            version: "3.4.3"
          - lib: "mpich"
            version: "3.0"


    # Define job-wide env constants, and promote matrix elements to env constants for portable steps.
    env:
      MPI_LIB: ${{ matrix.mpi.lib }}
      MPI_VERSION: ${{ matrix.mpi.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Install MPI from apt
      if: ${{ env.MPI_VERSION == 'apt' }}
      working-directory: ${{ runner.temp }}
      run: |
        sudo apt-get install lib${{ env.MPI_LIB }}-dev

    - name: Install OpenMPI from source
      if: ${{ env.MPI_VERSION != 'apt' && env.MPI_LIB == 'openmpi' }}
      working-directory: ${{ runner.temp }}
      run: |
        # Note: using download.open-mpi.org as gh tags aren't pre configured
        MPI_VERISON_MAJOR_MINOR=$(cut -d '.' -f 1,2 <<< "${{ env.MPI_VERSION}}")
        echo "https://download.open-mpi.org/release/open-mpi/v${MPI_VERISON_MAJOR_MINOR}/openmpi-${{ env.MPI_VERSION}}.tar.gz"
        wget -q https://download.open-mpi.org/release/open-mpi/v${MPI_VERISON_MAJOR_MINOR}/openmpi-${{ env.MPI_VERSION}}.tar.gz --output-document openmpi-${{ env.MPI_VERSION }}.tar.gz || (echo "An Error occurred while downloading OpenMPI '${{ env.MPI_VERSION }}'. Is it a valid version of OpenMPI?" && exit 1)
        tar -zxvf openmpi-${{ env.MPI_VERSION }}.tar.gz
        cd openmpi-${{ env.MPI_VERSION}}
        ./configure --prefix="${{ runner.temp }}/mpi"
        make -j `nproc`
        make install -j `nproc`
        echo "${{ runner.temp }}/mpi/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=${{ runner.temp }}/mpi/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "LD_RUN_PATH=${{ runner.temp }}/mpi/lib:${LD_RUN_PATH}" >> $GITHUB_ENV

    # This will only work for mpich >= 3.0, as 1.x is for mpich2 so requires handling differently
    # Uses the ch3 interface, as ch4 isn't available pre 3.4, but one must be specified for some versions
    - name: Install MPICH from source
      if: ${{ env.MPI_VERSION != 'apt' && env.MPI_LIB == 'mpich' }}
      working-directory: ${{ runner.temp }}
      run: |
        MPI_MAJOR=$(cut -d '.' -f 1 <<< "${{ env.MPI_VERSION}}")
        MPI_MINOR=$(cut -d '.' -f 2 <<< "${{ env.MPI_VERSION}}")
        [[ ${MPI_MAJOR} < 3 ]] && echo "MPICH must be >= 3.0" && exit 1
        echo "https://www.mpich.org/static/downloads/${{ env.MPI_VERSION }}/mpich-${{ env.MPI_VERSION}}.tar.gz"
        wget -q https://www.mpich.org/static/downloads/${{ env.MPI_VERSION }}/mpich-${{ env.MPI_VERSION}}.tar.gz --output-document mpich-${{ env.MPI_VERSION }}.tar.gz || (echo "An Error occurred while downloading MPICH '${{ env.MPI_VERSION }}'. Is it a valid version of MPICH?" && exit 1)
        tar -zxvf mpich-${{ env.MPI_VERSION }}.tar.gz
        cd mpich-${{ env.MPI_VERSION}}
        DISABLE_FORTRAN_FLAGS=""
        if (( ${MPI_MAJOR} >= 4 )) || ( ((${MPI_MAJOR} >= 3)) && ((${MPI_MINOR} >= 2)) ); then
            # MPICH >= 3.2 has --disable-fortran
            DISABLE_FORTRAN_FLAGS="--disable-fortran" 
        else
            DISABLE_FORTRAN_FLAGS="--disable-f77 --disable-fc"
        fi
        ./configure --prefix="${{ runner.temp }}/mpi" --with-device=ch3 ${DISABLE_FOTRAN_FLAGS}
        make -j `nproc`
        make install -j `nproc`
        echo "${{ runner.temp }}/mpi/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=${{ runner.temp }}/mpi/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "LD_RUN_PATH=${{ runner.temp }}/mpi/lib:${LD_RUN_PATH}" >> $GITHUB_ENV

    - name: test
      run: |
        mpirun --version
