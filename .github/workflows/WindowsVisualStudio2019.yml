# VS2019 on Windows-2019
name: WindowsVisualStudio2019

# Use an opt-in only approach based on file type.
# Advantages - clear how it works
# Disadvantages - potentially have to change it more often.
on:
  push:
    branches: [ master ]
    paths:
      # The workflow
      - ".github/workflows/WindowsVisualStudio2019.yml"
      - ".github/problem-matchers/*.json"

      # Any headers in any directory
      - "**.h"
      - "**.hpp"
      - "**.hxx"
      - "**.cuh"
      # Any source file in any directory
      - "**.c"
      - "**.cpp"
      - "**.cxx"
      - "**.cuh"
      # Any cmakelists in any directory
      - "**CMakeLists.txt"
      # Anything in a directory called `cmake`
      - "**cmake/**"
  pull_request:
    branches: [ master ]
    paths:
      # The workflow
      - ".github/workflows/WindowsVisualStudio2019.yml"
      - ".github/problem-matchers/*.json"

      # Any headers in any directory
      - "**.h"
      - "**.hpp"
      - "**.hxx"
      - "**.cuh"
      # Any source file in any directory
      - "**.c"
      - "**.cpp"
      - "**.cxx"
      - "**.cuh"
      # Any cmakelists in any directory
      - "**CMakeLists.txt"
      # Anything in a directory called `cmake`
      - "**cmake/**"


jobs:
  build:
    runs-on: windows-2019
    strategy:
      fail-fast: false
    env:
      visual_studio: "Visual Studio 16 2019"

    steps:
    - uses: actions/checkout@v2

    - name: apply matcher
      run: echo "::add-matcher::.github/problem-matchers/cmake-build-matchers.json"

    # - name: Install cpplint
    #   run: python -m pip install --upgrade cpplint

    - name: Configure CMake
      id: configure
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake .. -G "${{ env.visual_studio }}" -A x64

    - name: Configure Error Processing
      shell: bash
      working-directory: build
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi

    - name: Build
      id: build
      shell: bash
      working-directory: build
      run: |
        set -o pipefail
        cmake --build . --config Release --target ALL_BUILD --verbose |& tee CMakeBuild.log

    # - name: generate annotations
    #   if: ${{ failure() && steps.build.outcome == 'failure' }}
    #   working-directory: build
    #   run: python3 ../scripts/actions-msvc-annotations.py
    
    - name: Test
      run: ctest  -VV -j2
      shell: bash
      working-directory: build
